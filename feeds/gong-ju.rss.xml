<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>兰湾 - 工具</title><link href="http://st.avros.net/" rel="alternate"></link><link href="http://st.avros.net//feeds/gong-ju.rss.xml" rel="self"></link><id>http://st.avros.net/</id><updated>2017-08-10T00:00:00+08:00</updated><entry><title>再战RF功率计</title><link href="http://st.avros.net/articles/rf_power_meter_v2.html" rel="alternate"></link><published>2017-08-10T00:00:00+08:00</published><updated>2017-08-10T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2017-08-10:/articles/rf_power_meter_v2.html</id><summary type="html">&lt;p&gt;目标是实现从1mW以下到几瓦射频功率的测量。&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/rf_power_meter.jpg"&gt;&lt;img src="/images2/2017/rf_power_meter.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理图很简单，6个300欧电阻并联成50欧假负载，二极管检波、分压后由MCP3421进行AD转换，STM32F030控制OLED屏显示。供电用一节5号电池，BL8530升压到3.3V。&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/rf_power_meter_sch.jpg"&gt;&lt;img src="/images2/2017/rf_power_meter_sch.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要的麻烦在于检波二极管。2015年试过一次，用2SC1622、2N5551之类高反压三极管的BC结检波，结果发现输入频率50MHz时测得结果严重偏小，输入144M、430M时就完全测不到了，换成1N60则一切正常。可见结电容稍微大一点都不行。但是1N60的耐压只有40V，这样用单只1N60时能测到的最大功率为 \frac{(40\rm V / 2\sqrt{2})^2}{50\Omega}=4\rm W , 两只串联时也只有16W，还是稍嫌小了点儿。如果有耐压上百伏的锗二极管就能测到几十瓦的功率了。&lt;/p&gt;
&lt;p&gt;调试过程略麻烦。MCP3421测得的是22k分压电阻上的电压, 乘以(492/22)后可得二极管检波后的峰值电压, 再加上二极管压降Vf即得输入电压峰值.&lt;/p&gt;
&lt;p&gt;问题是小信号输入时二极管完全是非线性的, 因此需要对若干已知输入电压Vin, 算出二极管压降VD和电流I.&lt;/p&gt;
&lt;p&gt;根据二极管模型 I\approx I_Se …&lt;/p&gt;</summary><content type="html">&lt;p&gt;目标是实现从1mW以下到几瓦射频功率的测量。&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/rf_power_meter.jpg"&gt;&lt;img src="/images2/2017/rf_power_meter.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理图很简单，6个300欧电阻并联成50欧假负载，二极管检波、分压后由MCP3421进行AD转换，STM32F030控制OLED屏显示。供电用一节5号电池，BL8530升压到3.3V。&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/rf_power_meter_sch.jpg"&gt;&lt;img src="/images2/2017/rf_power_meter_sch.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要的麻烦在于检波二极管。2015年试过一次，用2SC1622、2N5551之类高反压三极管的BC结检波，结果发现输入频率50MHz时测得结果严重偏小，输入144M、430M时就完全测不到了，换成1N60则一切正常。可见结电容稍微大一点都不行。但是1N60的耐压只有40V，这样用单只1N60时能测到的最大功率为 \frac{(40\rm V / 2\sqrt{2})^2}{50\Omega}=4\rm W , 两只串联时也只有16W，还是稍嫌小了点儿。如果有耐压上百伏的锗二极管就能测到几十瓦的功率了。&lt;/p&gt;
&lt;p&gt;调试过程略麻烦。MCP3421测得的是22k分压电阻上的电压, 乘以(492/22)后可得二极管检波后的峰值电压, 再加上二极管压降Vf即得输入电压峰值.&lt;/p&gt;
&lt;p&gt;问题是小信号输入时二极管完全是非线性的, 因此需要对若干已知输入电压Vin, 算出二极管压降VD和电流I.&lt;/p&gt;
&lt;p&gt;根据二极管模型 I\approx I_Se^{V_D/nV_T} , 可得 V_D\approx nV_T{\rm ln}\frac{I}{I_S}=nV_T{\rm ln}I-nV_T{\rm ln}I_S , 其中n, Vt, Is都是常数. 之后就简单了, 用若干组实测数据, 拟合出Vd和I的关系式为V_D=0.0294{\rm ln}I + 0.5005, R^2=0.9941 . 从R平方值来看拟合得还可以.&lt;/p&gt;
&lt;p&gt;下表左边两列是根据输入电压计算的功率和dBm值, 右边两列是用ADC转换结果换算的功率和dBm值. 精度似乎不错, 除了第一组数据以外, 最多只差0.1dBm, -10dBm的下限已经远超预期了.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/rf_power_meter_tab.jpg"&gt;&lt;img src="/images2/2017/rf_power_meter_tab.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果需要准确测量更小的输入功率呢? 可以把检波二极管换成更灵敏的1SS86(反向耐压只有可怜的3V), 或者直接上对数放大器AD8307/AD8310之类.&lt;/p&gt;
&lt;p&gt;最后还有个坑: 一开始MCU选了STM32F030F4, 结果大概是因为浮点运算比较多, 最后编译完居然有30k多, STM32F030F4的16k Flash根本不够用. 保险起见, 换成了64k Flash的STM32F030C8.&lt;/p&gt;</content></entry><entry><title>二维码显示模块</title><link href="http://st.avros.net/articles/qrcode.html" rel="alternate"></link><published>2017-07-02T00:00:00+08:00</published><updated>2017-07-02T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2017-07-02:/articles/qrcode.html</id><summary type="html">&lt;p&gt;做了个小模块, 可以把字符串从PC传到模块上存储, 并以二维码显示出来.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/qrcode.jpg"&gt;&lt;img src="/images2/2017/qrcode.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理图如下, MCU用了48脚的stm32f103, 配1.44寸128x128的TFT屏, 存储么, 24C512和W25Q16各上一片. 其实只要24C512就足够了...&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/qrcode_sch.jpg"&gt;&lt;img src="/images2/2017/qrcode_sch.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;USB接口用了HID协议, 从stm32的官方USB例程改改就行, 好处是PC端不需要装驱动了. 程序太长就不贴上来了.&lt;/p&gt;
&lt;p&gt;默认例程收发都是以8字节为单位, 这里先改成64字节, 但是64字节的数据包还是不够长, 所以需要做简单的分包处理. 思路也简单, 把第一字节的最高位和次高位作为首包和尾包的标志位, 接收时如果发现是首包, 就把接收指针指向接收缓冲区的起始位置; 然后把后面的63字节依次从USB端点复制到接收缓冲区, 之后接收指针增加63. 如果发现是尾包, 就设一个"接收完成"的标志变量为真.&lt;/p&gt;
&lt;p&gt;主程序这边, 得到完整的数据后再调用libqrencode库, 把字符串转换成二维码显示出来, 最后设置"接收完成"的标志变量为假.&lt;/p&gt;
&lt;p&gt;PC端程序用python实现, 因为有pywinusb库, 所以很简单, 贴上来:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pywinusb.hid&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;hid&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# 从设备接收数据&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sample_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;         
    &lt;span class="n"&gt;data …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;做了个小模块, 可以把字符串从PC传到模块上存储, 并以二维码显示出来.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/qrcode.jpg"&gt;&lt;img src="/images2/2017/qrcode.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理图如下, MCU用了48脚的stm32f103, 配1.44寸128x128的TFT屏, 存储么, 24C512和W25Q16各上一片. 其实只要24C512就足够了...&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/qrcode_sch.jpg"&gt;&lt;img src="/images2/2017/qrcode_sch.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;USB接口用了HID协议, 从stm32的官方USB例程改改就行, 好处是PC端不需要装驱动了. 程序太长就不贴上来了.&lt;/p&gt;
&lt;p&gt;默认例程收发都是以8字节为单位, 这里先改成64字节, 但是64字节的数据包还是不够长, 所以需要做简单的分包处理. 思路也简单, 把第一字节的最高位和次高位作为首包和尾包的标志位, 接收时如果发现是首包, 就把接收指针指向接收缓冲区的起始位置; 然后把后面的63字节依次从USB端点复制到接收缓冲区, 之后接收指针增加63. 如果发现是尾包, 就设一个"接收完成"的标志变量为真.&lt;/p&gt;
&lt;p&gt;主程序这边, 得到完整的数据后再调用libqrencode库, 把字符串转换成二维码显示出来, 最后设置"接收完成"的标志变量为假.&lt;/p&gt;
&lt;p&gt;PC端程序用python实现, 因为有pywinusb库, 所以很简单, 贴上来:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pywinusb.hid&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;hid&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# 从设备接收数据&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sample_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;         
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 向设备发送数据&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hid_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x80&lt;/span&gt;  &lt;span class="c1"&gt;# 首包标志 &lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packetsize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;packetsize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;out_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_raw_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;
        &lt;span class="n"&gt;out_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;packetsize&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="c1"&gt;# buffer向后跳packetsize个位置&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mh"&gt;0x40&lt;/span&gt;    &lt;span class="c1"&gt;# 尾包标志&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;packetsize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 剩余数据不足, 补齐64字节&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt;
    &lt;span class="n"&gt;out_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_raw_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;out_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 主程序&lt;/span&gt;
&lt;span class="n"&gt;flt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HidDeviceFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vendor_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x8589&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 按vendor_id查找设备&lt;/span&gt;
&lt;span class="n"&gt;devices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_devices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;devices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;devices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_raw_data_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;out_report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_output_reports&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;packetsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="c1"&gt;# 每次发送63字节&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 汉字按utf-8处理&lt;/span&gt;
    &lt;span class="n"&gt;hid_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后问题来了, 发现最多只能生成61x61的二维码.&lt;/p&gt;
&lt;p&gt;分析原因, 估计是因为libqrencode库返回的qrcode结构体是用malloc分配内存的, 根据我在前面《写了个取剩余可用堆内存的函数》里的分析, arm-none-eabi-gcc里的malloc分配的内存数量上限只能是2的整数次幂; 偏偏libqrencode库内部还多次使用了malloc, 这样20k ram的stm32f103c8一不小心就只能分配到最多4096字节内存了, 如果要生成65x65的二维码就会分配失败.&lt;/p&gt;
&lt;p&gt;解决办法只能是换64脚的stm32f103rc或stm32f103re, 它们的内存分别是48k和64k; 128x128的屏幕能显示的最大二维码是125x125, 总共15625个点, 这样只要能成功分配到16k内存就行了, 估计有戏.&lt;/p&gt;
&lt;p&gt;附带的好处是, 这俩的flash空间分别有256k和512k, 但是现在程序空间只用了20k多, 这样可以把多余的空间用来存二维码, 24c512和w25q16都可以省掉了.&lt;/p&gt;
&lt;p&gt;ps. @Tariel推荐了一个代替*alloc的内存管理库: The BGET Memory Allocator, 也许用它能解决得更漂亮一点.&lt;/p&gt;
&lt;p&gt;--------------------更新-------------------------&lt;/p&gt;
&lt;p&gt;用bget代替malloc的结果, 可以生成69x69的二维码了... 确实是改善了一点点.&lt;/p&gt;</content></entry><entry><title>写了个取剩余可用堆内存的函数</title><link href="http://st.avros.net/articles/get_free_heap_mem.html" rel="alternate"></link><published>2017-06-29T00:00:00+08:00</published><updated>2017-06-29T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2017-06-29:/articles/get_free_heap_mem.html</id><summary type="html">&lt;p&gt;原理就是二分查找, 不断malloc, 找到一个malloc(n)成功, malloc(n+1)失败的位置&lt;/p&gt;
&lt;p&gt;如果堆空间不连续, 返回的应该是最大连续空间.&lt;/p&gt;
&lt;p&gt;程序如下, get_free_mem()中调用__get_free_mem()时指定上下界.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static size_t __get_free_mem(size_t start, size_t end)
{
    unsigned char *p;
    size_t size = (start + end) / 2;

    if(start == end - 1)
        return start - 1;

    p = malloc(size);
    if(p != NULL) {     // malloc succeeded
        free(p);
        return __get_free_mem(size …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;原理就是二分查找, 不断malloc, 找到一个malloc(n)成功, malloc(n+1)失败的位置&lt;/p&gt;
&lt;p&gt;如果堆空间不连续, 返回的应该是最大连续空间.&lt;/p&gt;
&lt;p&gt;程序如下, get_free_mem()中调用__get_free_mem()时指定上下界.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static size_t __get_free_mem(size_t start, size_t end)
{
    unsigned char *p;
    size_t size = (start + end) / 2;

    if(start == end - 1)
        return start - 1;

    p = malloc(size);
    if(p != NULL) {     // malloc succeeded
        free(p);
        return __get_free_mem(size + 1, end);
    }
    else {              // malloc failed
        return __get_free_mem(start, size);
    }

}

size_t get_free_mem(void)
{
    return __get_free_mem(0, 65536UL); 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;主要问题有两个, 一是在64k范围时要递归十几次, 4G范围时得递归30多次. 如果调用位置比较深总担心要爆栈, 得改成非递归的;&lt;/p&gt;
&lt;p&gt;二是stm32的syscall.c里的_sbrk()实现是判断heap_end加上incr是否超过asm("SP"), 其中heap_end是静态变量, 第一次调用时取_end的值. 这样有个问题就是把bss段和当前未用的栈空间都给算到堆空间了, 似乎不太合适. 是否应该跳过bss段, 以及把整个栈空间都去掉? &lt;/p&gt;
&lt;p&gt;实测: 在PC上用32位gcc编译, 结果是1.8G左右的内存. 在512M内存的树莓派上是345M左右, 都还算合理.&lt;/p&gt;
&lt;p&gt;在48k RAM的STM32F103RCT6上则比较有趣, make完size的结果是.data+.bss一共10256字节, 49152-10256=38896, 再去掉已用掉的栈空间, 应该是38k不到的样子. 但是get_free_mem的结果总是32768. &lt;/p&gt;
&lt;p&gt;如果先malloc(16000), get_free_mem的结果就变成了16384. 继续malloc, 结果逐渐减小为8192, 4096. 估计是arm-none-eabi-gcc的malloc内部实现上做了限制, 只取可用堆空间里最大的2的整数次幂.&lt;/p&gt;
&lt;p&gt;如果先这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;p = malloc(12000);    
q = malloc(12000);    
r = malloc(11300);
s = malloc(11000);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样可以成功分配到46300字节, 看来确实是把bss都算进来了. 然后, 果然hardfault了...&lt;/p&gt;
&lt;p&gt;上面两点有空再改吧.&lt;/p&gt;
&lt;p&gt;----------------更新--------------------&lt;/p&gt;
&lt;p&gt;上面的说法有误，arm-none-eabi-size -A main_rom.elf的结果, .bss是1860， ._user_heap_stack是8192. 而arm-none-eabi-size -B main_rom.elf的结果, bss是10052，应该是把上面两者都算作bss了。&lt;/p&gt;
&lt;p&gt;_user_heap_stack这部分作为堆空间是没有问题的，它应该只是在编译时起到检查静态空间是否越界的作用。&lt;/p&gt;
&lt;p&gt;--------------------再更新---------------------&lt;/p&gt;
&lt;p&gt;非递归版本的__get_free_mem函数如下... 脑子短路了，这个感觉比递归的还简单...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static size_t __get_free_mem2(size_t start, size_t end)
{
    unsigned char *p;
    while(start &amp;lt; end - 1) {
        size_t size = (start + end) / 2;
        if(size == 0)
            return 0;
       p = malloc(size);
        if(p != NULL) {     // malloc succeeded
            free(p);
            start = size;
        }
        else {              // malloc failed
            end = size - 1;
        } 
    } 
    return start;
}
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>卡片手电加强版</title><link href="http://st.avros.net/articles/handy_v3.html" rel="alternate"></link><published>2017-06-28T00:00:00+08:00</published><updated>2017-06-28T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2017-06-28:/articles/handy_v3.html</id><summary type="html">&lt;p&gt;之前做过一个卡片手电，链接：卡片手电，感觉亮度不太够；但是如果加大亮度，电池续航时间又嫌太短。所以有必要做成高低两档亮度。&lt;/p&gt;
&lt;p&gt;原理图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/handy_v3.png"&gt;&lt;img src="/images2/2017/handy_v3.png" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这次改用升压恒流的方式。升压IC不一定要用MP1540，只要是能从单锂电升压到13~14V的boost IC都可以。LED用了四只0.5W的5730，取样电阻R308串联在LED回路中，因此低亮度档的电流为1.25V/39R=32mA，相应的功率大约是0.4W。当需要高亮度时按下SW302，此时Q301导通，R305、R306与R308并联，总电阻为8.58R，此时的电流是146mA，总功率约1.9W。电池正负极连接J302、J303，MicroUSB口通过U301对电池充电。LTC4054比较贵，可以用国产的TP4054等型号完美代替。ps. D301负极对地漏了个滤波电容，10u的贴片电容就可以。&lt;/p&gt;
&lt;p&gt;升压恒流方式的优点是输出电流较小，因此取样电阻的功耗也较小；但当LED有一只断路时，boost输出电压会持续升高直到击穿，因此需要增加一只16V的稳压二极管D303，把输出电压限制在VFB+16V的位置。有些专门的LED升压驱动IC，比如MP3202，已经内置了保护电路。&lt;/p&gt;
&lt;p&gt;实物如下 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前做过一个卡片手电，链接：卡片手电，感觉亮度不太够；但是如果加大亮度，电池续航时间又嫌太短。所以有必要做成高低两档亮度。&lt;/p&gt;
&lt;p&gt;原理图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/handy_v3.png"&gt;&lt;img src="/images2/2017/handy_v3.png" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这次改用升压恒流的方式。升压IC不一定要用MP1540，只要是能从单锂电升压到13~14V的boost IC都可以。LED用了四只0.5W的5730，取样电阻R308串联在LED回路中，因此低亮度档的电流为1.25V/39R=32mA，相应的功率大约是0.4W。当需要高亮度时按下SW302，此时Q301导通，R305、R306与R308并联，总电阻为8.58R，此时的电流是146mA，总功率约1.9W。电池正负极连接J302、J303，MicroUSB口通过U301对电池充电。LTC4054比较贵，可以用国产的TP4054等型号完美代替。ps. D301负极对地漏了个滤波电容，10u的贴片电容就可以。&lt;/p&gt;
&lt;p&gt;升压恒流方式的优点是输出电流较小，因此取样电阻的功耗也较小；但当LED有一只断路时，boost输出电压会持续升高直到击穿，因此需要增加一只16V的稳压二极管D303，把输出电压限制在VFB+16V的位置。有些专门的LED升压驱动IC，比如MP3202，已经内置了保护电路。&lt;/p&gt;
&lt;p&gt;实物如下，PCB用502粘在随便一张什么卡上就行了。焊上电池，胶布缠好，完工！&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/handy_v3.jpg"&gt;&lt;img src="/images2/2017/handy_v3.jpg" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;</content></entry><entry><title>可级联的USB-UARTx2转换器</title><link href="http://st.avros.net/articles/usb_uartx2.html" rel="alternate"></link><published>2017-06-27T00:00:00+08:00</published><updated>2017-06-27T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2017-06-27:/articles/usb_uartx2.html</id><summary type="html">&lt;p&gt;各种DIY实验时经常需要不止一个串口，有时需要三四个；再加上下载器之类，PC提供的USB口多半不够，所以还得来个USB HUB。这堆东西肯定会把桌面弄得很乱。如果把USB HUB和USB转UART做到一起，不就简洁多了？
于是动手，原理图和实物如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/usb-uartx2.png"&gt;&lt;img src="/images2/2017/usb-uartx2.png" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/usb-uartx2.jpg"&gt;&lt;img src="/images2/2017/usb-uartx2.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;USB HUB IC选用GL850G，可以转出四个下级USB口。其中两个USB口接沁恒的CH340E，转为TTL串口；一个USB口用母座引出，可以用来接下载器之类。如果两个串口还不够，可以两套串一起用，这样就有四个串口了。&lt;/p&gt;
&lt;p&gt;CH340E是沁恒新出的小体积USB-UART转换器，实测波特率可以到2Mbps；但是不怎么好焊，感觉引脚不太沾锡，与同样MSOP-10封装的XTR111、AD9833相比差远了。大概沁恒的封装工艺还需要加强。&lt;/p&gt;
&lt;p&gt;ps. 刚看到沁恒又出了SOP8封装的CH330N，有空试试。&lt;/p&gt;</summary><content type="html">&lt;p&gt;各种DIY实验时经常需要不止一个串口，有时需要三四个；再加上下载器之类，PC提供的USB口多半不够，所以还得来个USB HUB。这堆东西肯定会把桌面弄得很乱。如果把USB HUB和USB转UART做到一起，不就简洁多了？
于是动手，原理图和实物如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/usb-uartx2.png"&gt;&lt;img src="/images2/2017/usb-uartx2.png" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2017/usb-uartx2.jpg"&gt;&lt;img src="/images2/2017/usb-uartx2.jpg" width="480" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;USB HUB IC选用GL850G，可以转出四个下级USB口。其中两个USB口接沁恒的CH340E，转为TTL串口；一个USB口用母座引出，可以用来接下载器之类。如果两个串口还不够，可以两套串一起用，这样就有四个串口了。&lt;/p&gt;
&lt;p&gt;CH340E是沁恒新出的小体积USB-UART转换器，实测波特率可以到2Mbps；但是不怎么好焊，感觉引脚不太沾锡，与同样MSOP-10封装的XTR111、AD9833相比差远了。大概沁恒的封装工艺还需要加强。&lt;/p&gt;
&lt;p&gt;ps. 刚看到沁恒又出了SOP8封装的CH330N，有空试试。&lt;/p&gt;</content></entry><entry><title>CH341T GPIO实验</title><link href="http://st.avros.net/articles/ch341t_gpio.html" rel="alternate"></link><published>2017-04-17T00:00:00+08:00</published><updated>2017-04-17T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2017-04-17:/articles/ch341t_gpio.html</id><summary type="html">&lt;p&gt;沁恒的CH341A是个多功能的USB总线转发器. 淘宝搜CH341A会搜出一大堆用它做的EEPROM/FLASH编程器, 而它的实际功能还要强大得多, 可以从USB提供异步串口、打印口、EPP/MEM并口、I2C、SPI等接口. 此外CH341A在EPP/MEM并口状态下还可以用沁恒提供的API直接操作引脚, 除了8位并口的8个脚以外, 若干状态引脚也能操作, 总共可以得到16个左右的GPIO. (其中有个别引脚只能输入或者只能输出. )&lt;/p&gt;
&lt;p&gt;这东西的主要缺点就是封装是SOP28宽体, 体积实在大了点. 它的两个小兄弟, CH341T和CH341H都是SSOP20封装, 苗条了很多, 前者只提供异步串口和I2C, 后者只提供SPI.&lt;/p&gt;
&lt;p&gt;CH341A配置不同功能是靠SDA的不同接法实现的, SDA/SCL悬空时连接PC会识别成异步串口, SDA拉低会识别成转EPP/MEM并口和I2C/SPI串口, SDA和SCL短接会识别成USB打印机. CH341T也提供了SDA和SCL引脚, 如果SDA接地, 能不能也把它的若干状态引脚当GPIO用呢?&lt;/p&gt;
&lt;p&gt;做了块小板, 实际测试, 果然可以! PC直接把它识别成了CH341A.&lt;/p&gt;
&lt;p&gt;接下来要实测哪些引脚可以使用. 这里要吐槽一下沁恒的API, 只提供了ch341dll.h, ch341dll.dll和ch341dll.lib; 试了各种办法想把ch341dll.lib转成mingw环境下的.a或者.o, 均失败. 没想到直接gcc …&lt;/p&gt;</summary><content type="html">&lt;p&gt;沁恒的CH341A是个多功能的USB总线转发器. 淘宝搜CH341A会搜出一大堆用它做的EEPROM/FLASH编程器, 而它的实际功能还要强大得多, 可以从USB提供异步串口、打印口、EPP/MEM并口、I2C、SPI等接口. 此外CH341A在EPP/MEM并口状态下还可以用沁恒提供的API直接操作引脚, 除了8位并口的8个脚以外, 若干状态引脚也能操作, 总共可以得到16个左右的GPIO. (其中有个别引脚只能输入或者只能输出. )&lt;/p&gt;
&lt;p&gt;这东西的主要缺点就是封装是SOP28宽体, 体积实在大了点. 它的两个小兄弟, CH341T和CH341H都是SSOP20封装, 苗条了很多, 前者只提供异步串口和I2C, 后者只提供SPI.&lt;/p&gt;
&lt;p&gt;CH341A配置不同功能是靠SDA的不同接法实现的, SDA/SCL悬空时连接PC会识别成异步串口, SDA拉低会识别成转EPP/MEM并口和I2C/SPI串口, SDA和SCL短接会识别成USB打印机. CH341T也提供了SDA和SCL引脚, 如果SDA接地, 能不能也把它的若干状态引脚当GPIO用呢?&lt;/p&gt;
&lt;p&gt;做了块小板, 实际测试, 果然可以! PC直接把它识别成了CH341A.&lt;/p&gt;
&lt;p&gt;接下来要实测哪些引脚可以使用. 这里要吐槽一下沁恒的API, 只提供了ch341dll.h, ch341dll.dll和ch341dll.lib; 试了各种办法想把ch341dll.lib转成mingw环境下的.a或者.o, 均失败. 没想到直接gcc ch341dll.dll main.o -o main.exe, 居然成功了.&lt;/p&gt;
&lt;p&gt;先试验输入状态, 程序如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;ch341dll.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="n"&gt;hdlCh341&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;hdlCh341&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CH341OpenDeviceEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;hdlCh341&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CH341GetVersion&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;CH341ResetDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;CH341SetOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;CH341GetInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%08lx&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行, 屏幕上不断输出0000efff.&lt;/p&gt;
&lt;p&gt;之后用杜邦线把模块的各个引脚逐个与地短接, 观察屏幕上的输出.&lt;/p&gt;
&lt;p&gt;短接5脚INT#/4脚RXD/3脚TXD/2脚ROV#/19脚TEN#/14脚SLP#到地时, 屏幕上的输出分别变为0000ebff, 0000edff, 0000eeff, 0000afff, 0000cfff, 0000ef7f. 说明这6个脚可以作为输入脚使用.&lt;/p&gt;
&lt;p&gt;再试验输出状态, 程序如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;ch341dll.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="n"&gt;hdlCh341&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;hdlCh341&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CH341OpenDeviceEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;hdlCh341&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CH341GetVersion&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;CH341ResetDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;CH341SetOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;CH341SetOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;b11111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="n"&gt;CH341SetOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;b11111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后用示波器观察各个引脚的波形, 结果发现除了上面的6个脚以外, 18脚TNOW/17脚RDY#/16脚SCL/15脚SDA也都有方波输出. 可见除了ACT#之外的10个脚都可以作为输出脚使用. 就是方波频率低了点, 只有1kHz左右.&lt;/p&gt;
&lt;p&gt;这么看来CH341T的潜力还挺大, 6个脚输入输出两用, 另外4个只输出, 足够实现很多功能了. 速度慢点, 做点简单的控制是没有问题的.&lt;/p&gt;
&lt;p&gt;更新: 今天想到, 可能某些管脚其实是没有内部上拉, 所以作为输入时拉到地没反应? 于是再在输入状态下把18~15这四个管脚分别上拉, 果然当SDA上拉时屏幕上的输出变成了0080efff. 可见SDA也能作为输入使用. 所以应该是7个双向GPIO, 3个只能输出.&lt;/p&gt;</content></entry><entry><title>带电压电流指示的USB充电器</title><link href="http://st.avros.net/articles/usb_charger_new.html" rel="alternate"></link><published>2016-12-31T00:00:00+08:00</published><updated>2016-12-31T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2016-12-31:/articles/usb_charger_new.html</id><summary type="html">&lt;p&gt;以前做过一个带输出电流指示的USB充电器, 电流指示用的是10段式LED光条, 用着挺好, 就是感觉10段式光条显示电流还是太粗略了. 最近玩了几个OLED屏, 感觉显示效果不错, 于是做了个直接显示电压电流数值的USB充电器.&lt;/p&gt;
&lt;p&gt;原理图如下, Buck IC用的是AOZ1050, 同步整流降压, 号称效率95%, 不过最大输出电流只有2A. 输入电压范围是4.5到16V, 当然输出5V时输入电压得高于5V才行, 我用的是12V. (需要更大电流的话, 可以考虑TPS54331/MP1584/MP2303之类, 可以到3A; AOSMD的AOZ1014或AOZ1094可以到5A, 他家还有更大电流的产品, 不过不知道好不好买.) 0.05欧电阻R1和运放U5, PMOS Q1组成高端电流检测, R1两端电压放大22倍后进单片机的ADC通道0, 输出电压则直接分一半进ADC通道1. 单片机用了20脚的STM32F030F4P6, 16K/4K的FLASH/RAM已经足够了. 显示屏用了一片0.91寸128x32分辨率的OLED. LDO U3为单片机和OLED屏供电, 注意它的输入电压, 常用的XC6206之类只允许5V输入, 12V进去肯定是要冒烟的.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2016/usb_charger_new.png" title="USB充电器"&gt;&lt;img src="/images2/2016/usb_charger_new.png" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;实物照片:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2016/usb_charger_new.jpg" title="USB充电器"&gt;&lt;img src="/images2/2016/usb_charger_new.jpg" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;注意, 电流好象超了? 其实是测得不准, 测量发现运放两输入端电压差几十mV, 看样子是自激了. 果然这个高端电流检测的原型电路不能直接抄来就用, 得在PMOS栅极加电阻 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;以前做过一个带输出电流指示的USB充电器, 电流指示用的是10段式LED光条, 用着挺好, 就是感觉10段式光条显示电流还是太粗略了. 最近玩了几个OLED屏, 感觉显示效果不错, 于是做了个直接显示电压电流数值的USB充电器.&lt;/p&gt;
&lt;p&gt;原理图如下, Buck IC用的是AOZ1050, 同步整流降压, 号称效率95%, 不过最大输出电流只有2A. 输入电压范围是4.5到16V, 当然输出5V时输入电压得高于5V才行, 我用的是12V. (需要更大电流的话, 可以考虑TPS54331/MP1584/MP2303之类, 可以到3A; AOSMD的AOZ1014或AOZ1094可以到5A, 他家还有更大电流的产品, 不过不知道好不好买.) 0.05欧电阻R1和运放U5, PMOS Q1组成高端电流检测, R1两端电压放大22倍后进单片机的ADC通道0, 输出电压则直接分一半进ADC通道1. 单片机用了20脚的STM32F030F4P6, 16K/4K的FLASH/RAM已经足够了. 显示屏用了一片0.91寸128x32分辨率的OLED. LDO U3为单片机和OLED屏供电, 注意它的输入电压, 常用的XC6206之类只允许5V输入, 12V进去肯定是要冒烟的.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2016/usb_charger_new.png" title="USB充电器"&gt;&lt;img src="/images2/2016/usb_charger_new.png" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;实物照片:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2016/usb_charger_new.jpg" title="USB充电器"&gt;&lt;img src="/images2/2016/usb_charger_new.jpg" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;注意, 电流好象超了? 其实是测得不准, 测量发现运放两输入端电压差几十mV, 看样子是自激了. 果然这个高端电流检测的原型电路不能直接抄来就用, 得在PMOS栅极加电阻, 运放2/6脚之间加个小电容才能用. 下次再改吧.&lt;/p&gt;
&lt;p&gt;再ps. 原理图里C2 1u太大了, 10~22nF就可以了.&lt;/p&gt;</content></entry><entry><title>试着用ATmega169做了个钟</title><link href="http://st.avros.net/articles/m169_clock.html" rel="alternate"></link><published>2016-12-26T00:00:00+08:00</published><updated>2016-12-26T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2016-12-26:/articles/m169_clock.html</id><summary type="html">&lt;p&gt;之前试过M328在Powerdown模式/WDT中断唤醒时工作电流不到1uA. AVR 8位单片机里带LCD控制器的不多, 查了一下似乎就只有64脚的M169/329/649和100脚的M3290/M6490这几种. 前段时间搞了几个m169和4位8字的笔段式LCD, 于是考虑做个钟, 用CR2032供电, 看看它的低功耗性能如何. &lt;/p&gt;
&lt;p&gt;WDT中断的时钟源是RC振荡器, 定时精度太差了, 做钟肯定是不行的; 幸好M169也支持T2定时器的异步模式, 可以用32.768KHz的晶振作为时钟源, 由T2中断唤醒. 以及M169的省电模式下LCD控制器仍然保持运行, 感觉都是很贴心的设计. 缺点就是... 体积太大了, 64脚还是0.8的间距, 封装面积是14*14=196mm2, 还不如用别的MCU配一片HT1621呢. ps. 这东西有9*9和7*7的两种QFN封装, 但是没见到哪有卖的.&lt;/p&gt;
&lt;p&gt;原理图很简单, 就不贴了. 实物照片:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2016/m169_clock.jpg" title="M169钟"&gt;&lt;img src="/images2/2016/m169_clock.jpg" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;实测工作电流大概20uA, CR2032的标称容量有200mAh多点, 算下来能工作一年多. 希望明年这会儿它还能走.&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前试过M328在Powerdown模式/WDT中断唤醒时工作电流不到1uA. AVR 8位单片机里带LCD控制器的不多, 查了一下似乎就只有64脚的M169/329/649和100脚的M3290/M6490这几种. 前段时间搞了几个m169和4位8字的笔段式LCD, 于是考虑做个钟, 用CR2032供电, 看看它的低功耗性能如何. &lt;/p&gt;
&lt;p&gt;WDT中断的时钟源是RC振荡器, 定时精度太差了, 做钟肯定是不行的; 幸好M169也支持T2定时器的异步模式, 可以用32.768KHz的晶振作为时钟源, 由T2中断唤醒. 以及M169的省电模式下LCD控制器仍然保持运行, 感觉都是很贴心的设计. 缺点就是... 体积太大了, 64脚还是0.8的间距, 封装面积是14*14=196mm2, 还不如用别的MCU配一片HT1621呢. ps. 这东西有9*9和7*7的两种QFN封装, 但是没见到哪有卖的.&lt;/p&gt;
&lt;p&gt;原理图很简单, 就不贴了. 实物照片:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2016/m169_clock.jpg" title="M169钟"&gt;&lt;img src="/images2/2016/m169_clock.jpg" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;实测工作电流大概20uA, CR2032的标称容量有200mAh多点, 算下来能工作一年多. 希望明年这会儿它还能走.&lt;/p&gt;</content></entry><entry><title>USB-485隔离转换器</title><link href="http://st.avros.net/articles/usb_485_new.html" rel="alternate"></link><published>2016-12-22T00:00:00+08:00</published><updated>2016-12-22T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2016-12-22:/articles/usb_485_new.html</id><summary type="html">&lt;p&gt;调试各种设备经常用到RS-485总线, 但是现在的PC连232也基本没有了, 只剩USB能用, 因此需要搞个USB-485的转换器. 做法也简单, 先用CP2102/PL2303/CH340/FT232之类IC把USB转成TTL电平的串口信号, 再从TTL转成485. (顺便点评一下: PL2303太差劲, FT232国内盗版太多, 用原厂驱动会烧, CP2102好用但是只有QFN封装不好焊, 国产的CH340最好用.)&lt;/p&gt;
&lt;p&gt;这里有个问题, 485收发器都需要提供收/发方向信号(也有自动切换方向的, 比如MAX13487, 但是要用的时候总是买不到), 由MCU直接控制很容易, 但从USB转出来的串口信号没法判断方向. 网上的通行做法是把485的DI脚直接接地, 串口TXD信号用晶体管反相后驱动485的DE/RE脚. 这样在接收状态时, TXD空闲为高电平, 反相后把485的DE/RE拉低, 于是485方向为接收, 没问题; 发送0时TXD为低电平, 反相后485的DE/RE脚拉高, DI脚接地, 于是485输出0, 也没问题. 发送1时TXD和空闲时一样是高电平, 485的DE/RE拉低, 方向为接收, 此时485的A/B脚是高阻状态, 靠A的上拉和B的下拉电阻输出1. 这样确实能通讯, 短距离工作也一切正常, 但是总觉得不太可靠.&lt;/p&gt;
&lt;p&gt;偶然发现国产芯片 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;调试各种设备经常用到RS-485总线, 但是现在的PC连232也基本没有了, 只剩USB能用, 因此需要搞个USB-485的转换器. 做法也简单, 先用CP2102/PL2303/CH340/FT232之类IC把USB转成TTL电平的串口信号, 再从TTL转成485. (顺便点评一下: PL2303太差劲, FT232国内盗版太多, 用原厂驱动会烧, CP2102好用但是只有QFN封装不好焊, 国产的CH340最好用.)&lt;/p&gt;
&lt;p&gt;这里有个问题, 485收发器都需要提供收/发方向信号(也有自动切换方向的, 比如MAX13487, 但是要用的时候总是买不到), 由MCU直接控制很容易, 但从USB转出来的串口信号没法判断方向. 网上的通行做法是把485的DI脚直接接地, 串口TXD信号用晶体管反相后驱动485的DE/RE脚. 这样在接收状态时, TXD空闲为高电平, 反相后把485的DE/RE拉低, 于是485方向为接收, 没问题; 发送0时TXD为低电平, 反相后485的DE/RE脚拉高, DI脚接地, 于是485输出0, 也没问题. 发送1时TXD和空闲时一样是高电平, 485的DE/RE拉低, 方向为接收, 此时485的A/B脚是高阻状态, 靠A的上拉和B的下拉电阻输出1. 这样确实能通讯, 短距离工作也一切正常, 但是总觉得不太可靠.&lt;/p&gt;
&lt;p&gt;偶然发现国产芯片: 江苏沁恒的CH341居然有个TNOW脚指示串口发送状态, 这样就不需要上面的笨办法了; 而且datasheet里还给了用它转换485的例子. 于是马上照做了一个, 果然好用, 目前115200波特率收发测试正常, 有空再试更高的波特率.&lt;/p&gt;
&lt;p&gt;原理图如下, 485驱动器用了ADI的ADM2483, 磁耦合隔离, 很好用. 不过它两边都要供电, 所以得再加个金升阳的隔离电源B0505S. 如果用自带供电的ADM2587, 这个隔离电源也可以省掉, 不过ADM2587实在太贵了. USB端加了TVS保护, 485端以后考虑也加一个.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2016/usb_485_new.png" title="USB转485"&gt;&lt;img src="/images2/2016/usb_485_new.png" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;ps. 沁恒的CH340最近出了免12M晶振的新版本CH340B/C, 实测750kbps好用, 1.5Mbps时发几百字节偶尔丢一字节数据, 总之已经很不错了. CH341也赶紧出个免晶振的版本吧.&lt;/p&gt;</content></entry><entry><title>Allegro导出bom和坐标文件, 用于嘉立创的SMT下单</title><link href="http://st.avros.net/articles/allegro_bom_coord.html" rel="alternate"></link><published>2016-12-16T00:00:00+08:00</published><updated>2016-12-16T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2016-12-16:/articles/allegro_bom_coord.html</id><summary type="html">&lt;p&gt;截图就不用贴了吧?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Allegro 菜单点 Tools, Reports &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 Available Reports 里找 Placed Component Report, 双击让它跑到下面框里.  &lt;/li&gt;
&lt;li&gt;选中 Write Report, 点 Report. 此时会在. brd 所在目录下生成一个 pcp_rep.rpt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Excel, 文件, 打开, 类型选” 所有文件”, 找到刚生成的 pcp_rep.rpt.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出现” 文本导入向导”, 直接点下一步.  &lt;/li&gt;
&lt;li&gt;分隔符号这里把” 逗号” 选上, 然后点下一步.  &lt;/li&gt;
&lt;li&gt;列数据格式, 选” 文本”, 然后点完成.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表格出来了, 前四行没用, 删掉. 表头要按 JLC 的格式修改, 具体如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REFDES …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;截图就不用贴了吧?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Allegro 菜单点 Tools, Reports &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 Available Reports 里找 Placed Component Report, 双击让它跑到下面框里.  &lt;/li&gt;
&lt;li&gt;选中 Write Report, 点 Report. 此时会在. brd 所在目录下生成一个 pcp_rep.rpt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Excel, 文件, 打开, 类型选” 所有文件”, 找到刚生成的 pcp_rep.rpt.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出现” 文本导入向导”, 直接点下一步.  &lt;/li&gt;
&lt;li&gt;分隔符号这里把” 逗号” 选上, 然后点下一步.  &lt;/li&gt;
&lt;li&gt;列数据格式, 选” 文本”, 然后点完成.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表格出来了, 前四行没用, 删掉. 表头要按 JLC 的格式修改, 具体如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REFDES, 改成 Designator.&lt;/li&gt;
&lt;li&gt;COMP_DEVICE_TYPE, 这列可以删掉.&lt;/li&gt;
&lt;li&gt;COMP_VALUE, 改成 Comment.&lt;/li&gt;
&lt;li&gt;COMP_TOL, 这列可以删掉.&lt;/li&gt;
&lt;li&gt;SYM_NAME, 改成Footprint. 下面的封装如果和JLC的不一样也要改. 比如我用的封装名称都是公制, RESC2012, CAPC1608之类, 要改成相应的英制RESC0805, CAPC0603. 没有前缀也可以, 但是在excel可能就变成805/603了, 不影响下单. SOP类的器件最好改成SOIC-8, SOIC-14这样, 等等, 总之以JLC给的参考文件为准. 选中这一列, 几次查找替换命令就解决了. &lt;/li&gt;
&lt;li&gt;SYM_X, SYM_Y, 这两个改成 Mid X 和 Mid Y, 底下的单位需要是毫米, mil 不行.&lt;/li&gt;
&lt;li&gt;SYM_ROTATE, 改成 Rotation.&lt;/li&gt;
&lt;li&gt;SYM_MIRROR, 改成 Layer. 底下的 YES 全部替换成 B, NO 替换成 T.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存成XLS或XLSX格式, 完事! BOM和坐标文件都用这一个就可以了.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;请继续往下看----&lt;/p&gt;
&lt;p&gt;写了个python脚本, 一键即可完成上述格式转换. 部分内容请自行按需修改. python3的, 如果你用python2的话可能得再改改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="n"&gt;csvfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pcp_rep.rpt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;csvfile2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pcp_rep_jlc.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvfile2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dialect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;excel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;                   &lt;span class="c1"&gt;# 跳过前四行&lt;/span&gt;

&lt;span class="c1"&gt;# 按JLC的格式修改表头&lt;/span&gt;
&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Designator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Comment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Footprint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mid X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mid Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rotation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Layer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 查找替换表, 请按需自行修改&lt;/span&gt;
&lt;span class="n"&gt;my_footprints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CAPC2012&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CAPC1608&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RESC2012&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RESC1608&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;jlc_footprints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C0805&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C0603&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;R0805&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;R0603&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;        &lt;span class="c1"&gt;# 删除不需要的两列&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;NO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;YES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_footprints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jlc_footprints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;my_footprints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="n"&gt;csvfile2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>开源我的fpm skill库</title><link href="http://st.avros.net/articles/fpm_skill.html" rel="alternate"></link><published>2016-11-28T00:00:00+08:00</published><updated>2016-11-28T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2016-11-28:/articles/fpm_skill.html</id><summary type="html">&lt;p&gt;无责任提供, 地址是&lt;a href="https://github.com/tomzbj/fpm_skills"&gt;https://github.com/tomzbj/fpm_skills&lt;/a&gt;, 请大家随意取用. 不定期更新.&lt;/p&gt;
&lt;p&gt;部分由Tariel和Kurapica制作的封装没有放进来, 如果有需要请自行联系他们二位.&lt;/p&gt;
&lt;p&gt;ps. 请先下载根目录的fpm.il并替换fpm目录的同名文件. 这个明文fpm.il由minux提供, 我添加了对槽孔的支持, 以及修正了若干bug, 比如双排简牛的缺口方向搞反, 四脚贴片有源晶振的管脚顺序错误之类.&lt;/p&gt;</summary><content type="html">&lt;p&gt;无责任提供, 地址是&lt;a href="https://github.com/tomzbj/fpm_skills"&gt;https://github.com/tomzbj/fpm_skills&lt;/a&gt;, 请大家随意取用. 不定期更新.&lt;/p&gt;
&lt;p&gt;部分由Tariel和Kurapica制作的封装没有放进来, 如果有需要请自行联系他们二位.&lt;/p&gt;
&lt;p&gt;ps. 请先下载根目录的fpm.il并替换fpm目录的同名文件. 这个明文fpm.il由minux提供, 我添加了对槽孔的支持, 以及修正了若干bug, 比如双排简牛的缺口方向搞反, 四脚贴片有源晶振的管脚顺序错误之类.&lt;/p&gt;</content></entry><entry><title>一键切换屏幕分辨率</title><link href="http://st.avros.net/articles/change_resolution.html" rel="alternate"></link><published>2016-11-17T00:00:00+08:00</published><updated>2016-11-17T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2016-11-17:/articles/change_resolution.html</id><summary type="html">&lt;p&gt;现在大家的桌面都是1920x1080或者2560x1440之类高分辨率了。但是有时候还不得不临时调到较低的分辨率，比如遇到需要像素级精确定位的时候，遇到百度网盘或者微信PC版这样字体又小又不能调大的软件的时候，等等。桌面右键然后改分辨率还是太麻烦了，用完了还得改回来。&lt;/p&gt;
&lt;p&gt;有没有办法一键切换分辨率呢？没找到现成的工具，自己写一个。程序如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;WinMain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HINSTANCE&lt;/span&gt; &lt;span class="n"&gt;hThisInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HINSTANCE&lt;/span&gt; &lt;span class="n"&gt;hPrevInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;LPSTR&lt;/span&gt; &lt;span class="n"&gt;lpszArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nFunsterStil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;DEVMODE&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;EnumDisplaySettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ENUM_CURRENT_SETTINGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsHeight&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;720&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1920&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ChangeDisplaySettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dm …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;现在大家的桌面都是1920x1080或者2560x1440之类高分辨率了。但是有时候还不得不临时调到较低的分辨率，比如遇到需要像素级精确定位的时候，遇到百度网盘或者微信PC版这样字体又小又不能调大的软件的时候，等等。桌面右键然后改分辨率还是太麻烦了，用完了还得改回来。&lt;/p&gt;
&lt;p&gt;有没有办法一键切换分辨率呢？没找到现成的工具，自己写一个。程序如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;WinMain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HINSTANCE&lt;/span&gt; &lt;span class="n"&gt;hThisInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HINSTANCE&lt;/span&gt; &lt;span class="n"&gt;hPrevInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;LPSTR&lt;/span&gt; &lt;span class="n"&gt;lpszArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nFunsterStil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;DEVMODE&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;EnumDisplaySettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ENUM_CURRENT_SETTINGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsHeight&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;720&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmPelsWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1920&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ChangeDisplaySettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CDS_RESET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译成exe，扔到随便什么地方，再拖到任务栏。好了，点一下就可以切到1280x720，再点一下就切回1920x1080了。&lt;/p&gt;
&lt;p&gt;在tdm-gcc-32和tdm-gcc-64环境下测试通过。&lt;/p&gt;</content></entry><entry><title>卡片手电 &amp; STLINK转接板 &amp; 迷你电源</title><link href="http://st.avros.net/articles/card_light.html" rel="alternate"></link><published>2016-09-22T00:00:00+08:00</published><updated>2016-09-22T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2016-09-22:/articles/card_light.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;卡片手电 &lt;br&gt;
    做了个和银行卡一样大的手电. 最厚处厚5.5mm, 因此可以和其他的卡一起塞在钱包里. &lt;br&gt;
    本来用AMC7135作为驱动, 结果这东西太娇气, 一不小心就烧坏, 于是干脆直接用电阻限流了, 好象效果也差不多.&lt;br&gt;
    效果见图:&lt;br&gt;
&lt;a href="/images2/2016/card_light_1.jpg" title="卡片手电"&gt;&lt;img src="/images2/2016/card_light_1.jpg" width="500px"/&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="/images2/2016/card_light_2.jpg" title="卡片手电"&gt;&lt;img src="/images2/2016/card_light_2.jpg" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STLINK转接板&lt;br&gt;
    JLINK和STLINK提供的都是20pin的标准JTAG口. 但是20pin实在太占地方了, 自己做板一般只用4pin或者5pin的SWD接口, 所以做了这个转接小板, 如图:&lt;br&gt;
&lt;a href="/images2/2016/jtag_swd.jpg" title="STLINK转接板"&gt;&lt;img src="/images2/2016/jtag_swd.jpg" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;simple power&lt;br&gt;
    可以方便地从一节18650得到3.3V, 2.8V, 2.4V, 2.0V, 1.8V和1.5V共6种电压. 之前用SEPIC电路做过一个, 发现DC-DC还是干扰太大, 所以这次用了线性稳压, 干扰能小点.&lt;br&gt;
    只用一个按键开关, 长按为开/关机, 短按为在不同电压之间切换, 用6个LED来指示各档输出电压.&lt;br&gt;
&lt;a href="/images2/2016/simple_power.jpg" title="simple power"&gt;&lt;img src="/images2/2016/simple_power.jpg" width="500px"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;卡片手电 &lt;br&gt;
    做了个和银行卡一样大的手电. 最厚处厚5.5mm, 因此可以和其他的卡一起塞在钱包里. &lt;br&gt;
    本来用AMC7135作为驱动, 结果这东西太娇气, 一不小心就烧坏, 于是干脆直接用电阻限流了, 好象效果也差不多.&lt;br&gt;
    效果见图:&lt;br&gt;
&lt;a href="/images2/2016/card_light_1.jpg" title="卡片手电"&gt;&lt;img src="/images2/2016/card_light_1.jpg" width="500px"/&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="/images2/2016/card_light_2.jpg" title="卡片手电"&gt;&lt;img src="/images2/2016/card_light_2.jpg" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STLINK转接板&lt;br&gt;
    JLINK和STLINK提供的都是20pin的标准JTAG口. 但是20pin实在太占地方了, 自己做板一般只用4pin或者5pin的SWD接口, 所以做了这个转接小板, 如图:&lt;br&gt;
&lt;a href="/images2/2016/jtag_swd.jpg" title="STLINK转接板"&gt;&lt;img src="/images2/2016/jtag_swd.jpg" width="500px"/&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;simple power&lt;br&gt;
    可以方便地从一节18650得到3.3V, 2.8V, 2.4V, 2.0V, 1.8V和1.5V共6种电压. 之前用SEPIC电路做过一个, 发现DC-DC还是干扰太大, 所以这次用了线性稳压, 干扰能小点.&lt;br&gt;
    只用一个按键开关, 长按为开/关机, 短按为在不同电压之间切换, 用6个LED来指示各档输出电压.&lt;br&gt;
&lt;a href="/images2/2016/simple_power.jpg" title="simple power"&gt;&lt;img src="/images2/2016/simple_power.jpg" width="500px"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>修复宜家LED灯一则</title><link href="http://st.avros.net/articles/ikea_led.html" rel="alternate"></link><published>2016-03-16T00:00:00+08:00</published><updated>2016-03-16T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2016-03-16:/articles/ikea_led.html</id><summary type="html">&lt;p&gt;宜家买的LED灯不亮了。把线剪断，两边分别一测，发现LED是好的，电源适配器无输出，只得再给它做个驱动。&lt;/p&gt;
&lt;p&gt;LED需要恒流驱动，直接接个恒压输出的适配器上去是不行的，要么不亮，要么烧坏。串个电阻行不行呢？行是行，不过电阻会很热。这个LED灯是3W的，工作电流1A，接到5V电源上就需要串联2欧的电阻，电阻的发热量达到2W。这么做显然太不优雅。&lt;/p&gt;
&lt;p&gt;幸好手里还有若干LED驱动IC：华润的PT4115，用它可以顺便把调光功能也加上。画了个电路图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2016/ikea_led.png"&gt;&lt;img src="/images2/2016/ikea_led.png" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中R1用于设定LED工作电流，公式为$I_{\rm LED} = \frac{0.1}{R_1}$. 电位器R2用于调光，从几百欧到几十kΩ的都可以用，这里用了拨轮式的音量电位器，好处是阻值按指数变化，这样LED亮度也按指数变化，会感觉实际亮度变化比较自然。&lt;/p&gt;
&lt;p&gt;LDO XC6206用于给PT4115的调光脚供电，用输出2.5V或3.3V的LDO都行。PT4115允许的输入电压范围是6~30V，但注意XC6206的输入电压最高只能到7V，因此只能用6~7V的电源供电。如果需要用更高输入电压的电源，可以把XC6206换成HT7133、MIC5207之类 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;宜家买的LED灯不亮了。把线剪断，两边分别一测，发现LED是好的，电源适配器无输出，只得再给它做个驱动。&lt;/p&gt;
&lt;p&gt;LED需要恒流驱动，直接接个恒压输出的适配器上去是不行的，要么不亮，要么烧坏。串个电阻行不行呢？行是行，不过电阻会很热。这个LED灯是3W的，工作电流1A，接到5V电源上就需要串联2欧的电阻，电阻的发热量达到2W。这么做显然太不优雅。&lt;/p&gt;
&lt;p&gt;幸好手里还有若干LED驱动IC：华润的PT4115，用它可以顺便把调光功能也加上。画了个电路图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2016/ikea_led.png"&gt;&lt;img src="/images2/2016/ikea_led.png" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中R1用于设定LED工作电流，公式为$I_{\rm LED} = \frac{0.1}{R_1}$. 电位器R2用于调光，从几百欧到几十kΩ的都可以用，这里用了拨轮式的音量电位器，好处是阻值按指数变化，这样LED亮度也按指数变化，会感觉实际亮度变化比较自然。&lt;/p&gt;
&lt;p&gt;LDO XC6206用于给PT4115的调光脚供电，用输出2.5V或3.3V的LDO都行。PT4115允许的输入电压范围是6~30V，但注意XC6206的输入电压最高只能到7V，因此只能用6~7V的电源供电。如果需要用更高输入电压的电源，可以把XC6206换成HT7133、MIC5207之类。&lt;/p&gt;
&lt;p&gt;电感L1用几十uH的功率电感就可以，注意饱和电流要大于1A。&lt;/p&gt;</content></entry><entry><title>利用Makefile实现avr-size -C的效果</title><link href="http://st.avros.net/articles/makefile_size.html" rel="alternate"></link><published>2016-01-03T00:00:00+08:00</published><updated>2016-01-03T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2016-01-03:/articles/makefile_size.html</id><summary type="html">&lt;p&gt;GNU工具链里的size大家应该都用过, 它可以显示elf/obj/exe/dll等可执行文件里各个段的大小, 非常方便. 加-A和-B参数分别是按sysv和berkeley格式显示, 默认带-B参数.&lt;/p&gt;
&lt;p&gt;avr-gcc里的avr-size则又增加了一个-C的选项, 可以显示单片机flash和ram的占用比例, 需要同时用--mcu参数指定avr单片机的型号, 效果是这样的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;avr-size -C --mcu=attiny26 main.elf
AVR Memory Usage
----------------
Device: attiny26

Program:    1316 bytes (64.3% Full)
(.text + .data + .bootloader)

Data:         23 bytes (18.0% Full)
(.data + .bss + .noinit)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是不是很方便? 可惜arm-gcc里的size并没有这个选项, 于是从avr转到stm32之后, 常常会感觉到不方便.&lt;/p&gt;
&lt;p&gt;后来发现, 只要在Makefile里all目标后面加上几行, 也能达到同样目的. 需要你的工具链里有sed和bc, sed用来从size的结果里截取包含数据的第二行 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GNU工具链里的size大家应该都用过, 它可以显示elf/obj/exe/dll等可执行文件里各个段的大小, 非常方便. 加-A和-B参数分别是按sysv和berkeley格式显示, 默认带-B参数.&lt;/p&gt;
&lt;p&gt;avr-gcc里的avr-size则又增加了一个-C的选项, 可以显示单片机flash和ram的占用比例, 需要同时用--mcu参数指定avr单片机的型号, 效果是这样的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;avr-size -C --mcu=attiny26 main.elf
AVR Memory Usage
----------------
Device: attiny26

Program:    1316 bytes (64.3% Full)
(.text + .data + .bootloader)

Data:         23 bytes (18.0% Full)
(.data + .bss + .noinit)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是不是很方便? 可惜arm-gcc里的size并没有这个选项, 于是从avr转到stm32之后, 常常会感觉到不方便.&lt;/p&gt;
&lt;p&gt;后来发现, 只要在Makefile里all目标后面加上几行, 也能达到同样目的. 需要你的工具链里有sed和bc, sed用来从size的结果里截取包含数据的第二行, bc则用来作浮点运算.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        @arr=(`$(TRGT)size $(PROJECT)_rom.elf | sed -n &amp;#39;2p&amp;#39;`); \
        let flash=($${arr[0]}+$${arr[1]}); \
        let mem=($${arr[1]}+$${arr[2]}); \
        let flash_size=$(subst K,,$(FLASH_SIZE))*1024; \
        let mem_size=$(subst K,,$(MEM_SIZE))*1024; \
        flash_usage=`echo &amp;quot;scale=1;($$flash*100/$$flash_size)&amp;quot; | bc`; \
        mem_usage=`echo &amp;quot;scale=1;($$mem*100/$$mem_size)&amp;quot; | bc`; \
        echo &amp;quot;Flash: $$flash / $$flash_size bytes, $$flash_usage% Full (.text + .data)&amp;quot;; \
        echo &amp;quot;SRAM:  $$mem / $$mem_size bytes, $$mem_usage% Full (.data + .bss)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arm-none-eabi-size main_rom.elf
   text    data     bss     dec     hex filename
  34928    2212    5316   42456    a5d8 main_rom.elf
Flash: 37140 / 65536 bytes, 56.6% Full (.text + .data)
SRAM:  7528 / 8192 bytes, 91.8% Full (.data + .bss)
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>最近的三个制作：酒酿机、6F22充电器、太阳能充电器</title><link href="http://st.avros.net/articles/fermetnter_6f22_solar.html" rel="alternate"></link><published>2015-08-15T00:00:00+08:00</published><updated>2015-08-15T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2015-08-15:/articles/fermetnter_6f22_solar.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;酒酿机&lt;/p&gt;
&lt;p&gt;做酒酿(醪醩)需要保持40度左右的温度发酵。正好家里有个最便宜的小熊酸奶机，不带控温功能的，能否用它来改装成酒酿机呢？&lt;/p&gt;
&lt;p&gt;把小熊酸奶机拆开一看，里面简单得一塌糊涂：铝板上装了个PTC电阻，直接接220V电源，作为发热器，旁边甩了两条线出来接前面板的指示灯。可以说毫无技术含量。于是把这些东西都拆掉，换成前几天做的PID控温电路。控温板上加了两个两位LED数码管，分别显示设定温度和实测温度，两个按键开关用来控温。加热器还是IRF530+LM35的配置。控温范围从35度到65度。&lt;/p&gt;
&lt;p&gt;发酵碗里装满水，放个温度计，开机一晚上实测……发现碗里的水温最终会比发热板的实测温度低15~20度。大概是因为发热板外面隔了一层塑料板，发酵碗又是一层塑料，两层塑料的热阻太大了。幸好温度已经能满足做酒酿的要求了。&lt;/p&gt;
&lt;p&gt;下次打算把LM35的引线接长一些，粘在发热板以外的塑料侧壁上，避免从发热板直接传导热量到LM35，这样效果也许会好些？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6F22充电器&lt;/p&gt;
&lt;p&gt;手里有两个可充电的6F22，但是一直没有好用的充电器。以前买过一个，拆开一看，里面实在是惨不忍睹，只好扔了。&lt;/p&gt;
&lt;p&gt;自己做了一个，电路图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/6f22_charger.png"&gt;&lt;img src="/images2/2015/6f22_charger.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;从USB输入的5V电压，用TP7660二倍压得到10V，再通过100欧电阻限流后给6F22充电。TL061接成比较器，一个输入端接电池正极，另一个输入端接100欧电阻和1k电阻分压得到的约9 …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;酒酿机&lt;/p&gt;
&lt;p&gt;做酒酿(醪醩)需要保持40度左右的温度发酵。正好家里有个最便宜的小熊酸奶机，不带控温功能的，能否用它来改装成酒酿机呢？&lt;/p&gt;
&lt;p&gt;把小熊酸奶机拆开一看，里面简单得一塌糊涂：铝板上装了个PTC电阻，直接接220V电源，作为发热器，旁边甩了两条线出来接前面板的指示灯。可以说毫无技术含量。于是把这些东西都拆掉，换成前几天做的PID控温电路。控温板上加了两个两位LED数码管，分别显示设定温度和实测温度，两个按键开关用来控温。加热器还是IRF530+LM35的配置。控温范围从35度到65度。&lt;/p&gt;
&lt;p&gt;发酵碗里装满水，放个温度计，开机一晚上实测……发现碗里的水温最终会比发热板的实测温度低15~20度。大概是因为发热板外面隔了一层塑料板，发酵碗又是一层塑料，两层塑料的热阻太大了。幸好温度已经能满足做酒酿的要求了。&lt;/p&gt;
&lt;p&gt;下次打算把LM35的引线接长一些，粘在发热板以外的塑料侧壁上，避免从发热板直接传导热量到LM35，这样效果也许会好些？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6F22充电器&lt;/p&gt;
&lt;p&gt;手里有两个可充电的6F22，但是一直没有好用的充电器。以前买过一个，拆开一看，里面实在是惨不忍睹，只好扔了。&lt;/p&gt;
&lt;p&gt;自己做了一个，电路图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/6f22_charger.png"&gt;&lt;img src="/images2/2015/6f22_charger.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;从USB输入的5V电压，用TP7660二倍压得到10V，再通过100欧电阻限流后给6F22充电。TL061接成比较器，一个输入端接电池正极，另一个输入端接100欧电阻和1k电阻分压得到的约9.1V电压。输出端接两个LED，分别表示正在充电和已经充满。之所以用TL061，一是因为@Tariel之前送了我不少，二是因为它的输入共模电压最高可以达到电源电压，这是一般运放不具备的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;太阳能充电器&lt;/p&gt;
&lt;p&gt;以前做的一个小台钟，用锂电池供电，充满一次电能工作半个月左右。但是半个月充一次电还是太麻烦，如果能利用太阳能给它充电，就省事多了。电路图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/solar_charger.png"&gt;&lt;img src="/images2/2015/solar_charger.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;就是PT1301的基本升压电路，输出电压为5.24V左右，再经过SS34降压后差不多是5V。等太阳能直射到书房了，看看效果如何。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>PID控温实验</title><link href="http://st.avros.net/articles/pid_expr.html" rel="alternate"></link><published>2015-07-13T00:00:00+08:00</published><updated>2015-07-13T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2015-07-13:/articles/pid_expr.html</id><summary type="html">&lt;p&gt;做了个PID温控器，原理图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/pid_expr.png"&gt;&lt;img src="/images2/2015/pid_expr.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;电源电压首先流经0.33欧的取样电阻R1，然后给加热器供电。加热器用随便一个TO220封装的N沟道MOS管就行，LM35用来测温。高端电流检测虽然麻烦些，但这样加热器的连线可以更简单，四条线就够了。&lt;/p&gt;
&lt;p&gt;LM35输出的电压值经Mega48 AD转换后得到温度值。Mega48输出一路PWM经低通滤波后与取样电阻R1上的电压比较后控制MOS管的电流。之后用简单的PID算法即可实现控温了。&lt;/p&gt;
&lt;p&gt;把MOS管和LM35用导热胶粘在一块95mm x 66mm的散热片上，实测用12V 2A的电源供电时，开环加热可以达到44度左右。启用PID控温后，可以在室温~44度之间把温度控制到设定值正负0.1度。&lt;/p&gt;
&lt;p&gt;之后在这个基础上可以做很多东西了，比如酸奶机、酒酿机、煮温泉蛋机等等。&lt;/p&gt;</summary><content type="html">&lt;p&gt;做了个PID温控器，原理图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/pid_expr.png"&gt;&lt;img src="/images2/2015/pid_expr.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;电源电压首先流经0.33欧的取样电阻R1，然后给加热器供电。加热器用随便一个TO220封装的N沟道MOS管就行，LM35用来测温。高端电流检测虽然麻烦些，但这样加热器的连线可以更简单，四条线就够了。&lt;/p&gt;
&lt;p&gt;LM35输出的电压值经Mega48 AD转换后得到温度值。Mega48输出一路PWM经低通滤波后与取样电阻R1上的电压比较后控制MOS管的电流。之后用简单的PID算法即可实现控温了。&lt;/p&gt;
&lt;p&gt;把MOS管和LM35用导热胶粘在一块95mm x 66mm的散热片上，实测用12V 2A的电源供电时，开环加热可以达到44度左右。启用PID控温后，可以在室温~44度之间把温度控制到设定值正负0.1度。&lt;/p&gt;
&lt;p&gt;之后在这个基础上可以做很多东西了，比如酸奶机、酒酿机、煮温泉蛋机等等。&lt;/p&gt;</content></entry><entry><title>最近的三个制作</title><link href="http://st.avros.net/articles/6f22_fm_rf.html" rel="alternate"></link><published>2015-05-21T00:00:00+08:00</published><updated>2015-05-21T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2015-05-21:/articles/6f22_fm_rf.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;彻底榨干6F22的剩余电量&lt;/p&gt;
&lt;p&gt;从万用表里拆下来的6F22常常还有许多电量没有用掉, 直接扔掉比较可惜. 把它DC-DC降压后给单片机之类供电, 还能再撑一段时间. &lt;/p&gt;
&lt;p&gt;电路如图, 就是AOZ1016的标准电路. 在它的EN脚对地接一个22uF的电解电容, 再对电源和对地各接一个轻触开关, 便实现了软开关. EN脚的输入电流极小, 靠22u电解就能维持工作几十分钟. EN脚拉低时, AOZ1016消耗电流仅1μA左右, 完全可以忽略不计了. DC-DC降压到3.68V左右, 再由XC6206稳压到3.3V.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/6f22.png"&gt;&lt;img src="/images2/2015/6f22.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继续试验简易FM无线话筒&lt;/p&gt;
&lt;p&gt;话筒信号放大后直接推动与晶振串联的变容二极管, MMBT2222或S9018接成电容三点式振荡器, 谐振在晶振的三倍频上. 可惜这种方式能得到的频偏还是太小, 用收音机只能收到很微弱的信号. 下次试试锁相环调频吧.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/fm_caller_simple.png"&gt;&lt;img src="/images2/2015/fm_caller_simple.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RF功率计&lt;/p&gt;
&lt;p&gt;几年前Tariel/BH1PHL送了我一个50欧 100W的RF电阻, 一直没用上.&lt;/p&gt;
&lt;p&gt;这次用它做了个假负载+功率计, 从RF电阻上取电压, 检波、滤波后分压, 用mega48的adc采样, 显示在0801液晶屏上. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/rf_power_meter.png"&gt;&lt;img src="/images2/2015/rf_power_meter.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;一开始检波二极管用的是2SC1622的BC结, 结果实测在50M时功率严重偏小, 144M和430M就一点功率也测不到了. 换成1N60之后一切正常. 估计是因为2SC1622的结电容太大?&lt;/p&gt;
&lt;p&gt;但是1N60耐压太低, 只有50V, 这样只能测到峰值25V的RF电压, 换算成功率只有6.25W了. 下次还是得用先衰减再测的方案.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;彻底榨干6F22的剩余电量&lt;/p&gt;
&lt;p&gt;从万用表里拆下来的6F22常常还有许多电量没有用掉, 直接扔掉比较可惜. 把它DC-DC降压后给单片机之类供电, 还能再撑一段时间. &lt;/p&gt;
&lt;p&gt;电路如图, 就是AOZ1016的标准电路. 在它的EN脚对地接一个22uF的电解电容, 再对电源和对地各接一个轻触开关, 便实现了软开关. EN脚的输入电流极小, 靠22u电解就能维持工作几十分钟. EN脚拉低时, AOZ1016消耗电流仅1μA左右, 完全可以忽略不计了. DC-DC降压到3.68V左右, 再由XC6206稳压到3.3V.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/6f22.png"&gt;&lt;img src="/images2/2015/6f22.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继续试验简易FM无线话筒&lt;/p&gt;
&lt;p&gt;话筒信号放大后直接推动与晶振串联的变容二极管, MMBT2222或S9018接成电容三点式振荡器, 谐振在晶振的三倍频上. 可惜这种方式能得到的频偏还是太小, 用收音机只能收到很微弱的信号. 下次试试锁相环调频吧.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/fm_caller_simple.png"&gt;&lt;img src="/images2/2015/fm_caller_simple.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RF功率计&lt;/p&gt;
&lt;p&gt;几年前Tariel/BH1PHL送了我一个50欧 100W的RF电阻, 一直没用上.&lt;/p&gt;
&lt;p&gt;这次用它做了个假负载+功率计, 从RF电阻上取电压, 检波、滤波后分压, 用mega48的adc采样, 显示在0801液晶屏上. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images2/2015/rf_power_meter.png"&gt;&lt;img src="/images2/2015/rf_power_meter.png" width="480" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;一开始检波二极管用的是2SC1622的BC结, 结果实测在50M时功率严重偏小, 144M和430M就一点功率也测不到了. 换成1N60之后一切正常. 估计是因为2SC1622的结电容太大?&lt;/p&gt;
&lt;p&gt;但是1N60耐压太低, 只有50V, 这样只能测到峰值25V的RF电压, 换算成功率只有6.25W了. 下次还是得用先衰减再测的方案.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>小台钟</title><link href="http://st.avros.net/articles/tiny24_clock.html" rel="alternate"></link><published>2015-05-02T00:00:00+08:00</published><updated>2015-05-02T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2015-05-02:/articles/tiny24_clock.html</id><summary type="html">&lt;p&gt;用手里闲置的Attiny24+LCD0801屏做了个小钟, 如图:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/tiny24_clock.jpg" title="照片"&gt;&lt;img src="/images/tiny24_clock.jpg" width="500px" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用一节600还是800mAh的手机电池供电, 充满电可以工作半个月.&lt;/p&gt;
&lt;p&gt;原理图:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/tiny24_clock_2.png" title="原理图"&gt;&lt;img src="/images/tiny24_clock_2.png" width="500px" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中LCD用的是0801, 和1602接口完全一样, 加了一块之前做的&lt;a href="articles/firefly&amp;amp;serlcd1602.html"&gt;串口转换小板&lt;/a&gt;. 由于是3.3V供电, LCD的V0脚需要接入负压, 这里负压用MCU的一路PWM经负倍压整流产生. 晶振用什么频率其实都无关紧要, 只要是个整数, 并且按一定的分频规则能凑出2Hz的频率就行了.&lt;/p&gt;
&lt;p&gt;源程序:&lt;/p&gt;
&lt;p&gt;&lt;a href="/files/tiny24_clock_src.7z"&gt;tiny24_clock_src.7z&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;改天再给它加个太阳能电池, 这样也许就再也不用充电了.&lt;/p&gt;</summary><content type="html">&lt;p&gt;用手里闲置的Attiny24+LCD0801屏做了个小钟, 如图:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/tiny24_clock.jpg" title="照片"&gt;&lt;img src="/images/tiny24_clock.jpg" width="500px" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用一节600还是800mAh的手机电池供电, 充满电可以工作半个月.&lt;/p&gt;
&lt;p&gt;原理图:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/tiny24_clock_2.png" title="原理图"&gt;&lt;img src="/images/tiny24_clock_2.png" width="500px" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中LCD用的是0801, 和1602接口完全一样, 加了一块之前做的&lt;a href="articles/firefly&amp;amp;serlcd1602.html"&gt;串口转换小板&lt;/a&gt;. 由于是3.3V供电, LCD的V0脚需要接入负压, 这里负压用MCU的一路PWM经负倍压整流产生. 晶振用什么频率其实都无关紧要, 只要是个整数, 并且按一定的分频规则能凑出2Hz的频率就行了.&lt;/p&gt;
&lt;p&gt;源程序:&lt;/p&gt;
&lt;p&gt;&lt;a href="/files/tiny24_clock_src.7z"&gt;tiny24_clock_src.7z&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;改天再给它加个太阳能电池, 这样也许就再也不用充电了.&lt;/p&gt;</content></entry><entry><title>在stm32上使用二进制字库的简单方法</title><link href="http://st.avros.net/articles/stm32_fonts.html" rel="alternate"></link><published>2015-03-13T00:00:00+08:00</published><updated>2015-03-13T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2015-03-13:/articles/stm32_fonts.html</id><summary type="html">&lt;p&gt;标题其实可以写成"在可执行程序里嵌入二进制资源的方法", 不过这个题目大了点, 还是原样吧.&lt;/p&gt;
&lt;p&gt;以前如果我们用到不带字库的点阵LCD, 一般都是把字库按16进制写成一个大数组, 再和其他源程序一起编译. 有没有方便一点的办法呢？这里给出两个方案.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用objcopy把字库转成目标文件(.o/.obj)&lt;/p&gt;
&lt;p&gt;假设我们需要嵌入的是5x7的ascii点阵字库, 文件名是asc5x7.bin.&lt;/p&gt;
&lt;p&gt;在arm-gcc环境下, 命令如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arm-none-eabi-objcopy -B arm -I binary -O elf32-littlearm --rename-section .data=.rodata asc5x7.bin asc5x7.o
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的是, objcopy生成的.o文件默认是把数据放在.data段的. 因此这里需要加个--rename-section的选项, 把.data改成.text或者.rodata, 不然单片机可怜的一点点RAM根本不够用. 如果是在PC上运行, 这里改不改就无所谓了, 不过内存还是能省点就省点的好.&lt;/p&gt;
&lt;p&gt;在.o里会生成三个符号: &lt;code&gt;_binary_asc5x7_bin_start, _binary_asc5x7_bin_end, binary_asc5x7_bin_size.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在程序里这么调用 …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;标题其实可以写成"在可执行程序里嵌入二进制资源的方法", 不过这个题目大了点, 还是原样吧.&lt;/p&gt;
&lt;p&gt;以前如果我们用到不带字库的点阵LCD, 一般都是把字库按16进制写成一个大数组, 再和其他源程序一起编译. 有没有方便一点的办法呢？这里给出两个方案.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用objcopy把字库转成目标文件(.o/.obj)&lt;/p&gt;
&lt;p&gt;假设我们需要嵌入的是5x7的ascii点阵字库, 文件名是asc5x7.bin.&lt;/p&gt;
&lt;p&gt;在arm-gcc环境下, 命令如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arm-none-eabi-objcopy -B arm -I binary -O elf32-littlearm --rename-section .data=.rodata asc5x7.bin asc5x7.o
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的是, objcopy生成的.o文件默认是把数据放在.data段的. 因此这里需要加个--rename-section的选项, 把.data改成.text或者.rodata, 不然单片机可怜的一点点RAM根本不够用. 如果是在PC上运行, 这里改不改就无所谓了, 不过内存还是能省点就省点的好.&lt;/p&gt;
&lt;p&gt;在.o里会生成三个符号: &lt;code&gt;_binary_asc5x7_bin_start, _binary_asc5x7_bin_end, binary_asc5x7_bin_size.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在程序里这么调用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;extern const int _binary_asc5x7_bin_start;
uint8_t *start = (uint8_t *) (&amp;amp;_binary_asc5x7_bin_start);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样我们就得到了字库的起始地址. 在AVR上可能会稍复杂一些, 因为数据存储在FLASH里, 所以需要象PROGMEM数组一样, 用pgm_read_byte之类函数来读取.&lt;/p&gt;
&lt;p&gt;链接时会有一堆错误提示: "Conflicting CPU architectures ....", 这是因为.o里还缺少一个叫.ARM.attributes的段. 不过实际上也没啥影响, 程序是可以正确运行的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接利用GNU汇编的.incbin功能&lt;/p&gt;
&lt;p&gt;这是minux@bdwm提供的方法, 解决得明显更漂亮一些.&lt;/p&gt;
&lt;p&gt;首先建立一个asc5x7.s的源文件,内容如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.section&lt;/span&gt; &lt;span class="no"&gt;.rodata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="no"&gt;progbits&lt;/span&gt;
&lt;span class="na"&gt;.global&lt;/span&gt; &lt;span class="no"&gt;_binary_asc5x7_bin_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;_binary_asc5x7_bin_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;_binary_asc5x7_bin_size&lt;/span&gt;
&lt;span class="nl"&gt;_binary_asc5x7_bin_start:&lt;/span&gt;
&lt;span class="na"&gt;.incbin&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;asc5x7.bin&amp;quot;&lt;/span&gt;
&lt;span class="nl"&gt;_binary_asc5x7_bin_end:&lt;/span&gt;
&lt;span class="nf"&gt;_binary_asc5x7_bin_size&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="no"&gt;_binary_asc5x7_bin_end&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;_binary_asc5x7_bin_start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实_binary_asc5x7_bin_size和_binary_asc5x7_bin_end这两个符号不要也可以, 因为字库的存储格式我们事先已经知道了.&lt;/p&gt;
&lt;p&gt;然后建立一个空的.c文件: &lt;code&gt;touch empty.c,  arm-none-eabi-gcc -S empty.c&lt;/code&gt;, 这样我们得到了一个empty.s, 内容如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; .cpu arm7tdmi-s
 .fpu softvfp
 .eabi_attribute 20, 1
 .eabi_attribute 21, 1
 .eabi_attribute 23, 3
 .eabi_attribute 24, 1
 .eabi_attribute 25, 1
 .eabi_attribute 26, 1
 .eabi_attribute 30, 6
 .eabi_attribute 18, 4
 .file     &amp;quot;empty.c&amp;quot;
 .ident     &amp;quot;GCC: (Sourcery G++ Lite 2011.03-42) 4.5.2&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把这些东西复制到之前那个asc5x7.s里, 部分内容可能要按需调整一下, 比如.cpu这里应该改成cortex-m0或者cortex-m3之类. 这样在链接时就不会出现前面那个"Conflicting CPU architectures ...."的报错信息了.&lt;/p&gt;
&lt;p&gt;如果要使用几个字库呢? 可以把它们全都放在一个段里, 但是如果只用到了某一个或几个字库, 也会把它们全都链接进去, 导致最终的可执行文件体积过大. 因此最好是拆成几个段. 假设我们用到了asc5x7.bin, asc12.bin, asc16.bin和asc24.bin, 写出来应该是这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.section&lt;/span&gt; &lt;span class="no"&gt;.rodata.asc5x7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="no"&gt;progbits&lt;/span&gt;
&lt;span class="na"&gt;.global&lt;/span&gt; &lt;span class="no"&gt;_binary_asc5x7_bin_start&lt;/span&gt;
&lt;span class="nl"&gt;_binary_asc5x7_bin_start:&lt;/span&gt;
&lt;span class="na"&gt;.incbin&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;asc5x7.bin&amp;quot;&lt;/span&gt;

&lt;span class="na"&gt;.section&lt;/span&gt; &lt;span class="no"&gt;.rodata.asc12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="no"&gt;progbits&lt;/span&gt;
&lt;span class="na"&gt;.global&lt;/span&gt; &lt;span class="no"&gt;_binary_asc12_bin_start&lt;/span&gt;
&lt;span class="nl"&gt;_binary_asc12_bin_start:&lt;/span&gt;
&lt;span class="na"&gt;.incbin&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;asc12.bin&amp;quot;&lt;/span&gt;

&lt;span class="na"&gt;.section&lt;/span&gt; &lt;span class="no"&gt;.rodata.asc16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="no"&gt;progbits&lt;/span&gt;
&lt;span class="na"&gt;.global&lt;/span&gt; &lt;span class="no"&gt;_binary_asc16_bin_start&lt;/span&gt;
&lt;span class="nl"&gt;_binary_asc16_bin_start:&lt;/span&gt;
&lt;span class="na"&gt;.incbin&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;asc16.bin&amp;quot;&lt;/span&gt;

&lt;span class="na"&gt;.section&lt;/span&gt; &lt;span class="no"&gt;.rodata.asc24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="no"&gt;progbits&lt;/span&gt;
&lt;span class="na"&gt;.global&lt;/span&gt; &lt;span class="no"&gt;_binary_asc24_bin_start&lt;/span&gt;
&lt;span class="nl"&gt;_binary_asc24_bin_start:&lt;/span&gt;
&lt;span class="na"&gt;.incbin&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;asc24.bin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后Makefile里需要增加几个参数, 假如之前没有的话.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CFLAGS += -ffunction-sections --data-sections,
LDFLAGS += -Wl,--gc-sections
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就只会把实际用到的段链接到最终可执行文件了.&lt;/p&gt;
&lt;p&gt;如果要在可执行文件里嵌入图片, 音频之类, 也可以用同样的方法.&lt;/p&gt;
&lt;p&gt;以上程序均在Windows 7 &amp;amp; Sourcery G++ &amp;amp; STM32F103/F030环境下测试通过. 在Keil/IAR等环境下请自行类推.&lt;/p&gt;
&lt;p&gt;补充：注意asc5x7.bin的字节数是奇数, 这样会使得后面几个字库的起始地址都是奇数, stm32进行某些操作时会进入HardFault. 解决办法是在每个.section之前的位置加个.align(3).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>Sansei DMM2650背光改装记录</title><link href="http://st.avros.net/articles/dmm2650.html" rel="alternate"></link><published>2014-12-12T00:00:00+08:00</published><updated>2014-12-12T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2014-12-12:/articles/dmm2650.html</id><summary type="html">&lt;p&gt;Sansei DMM2650是80年代的小型台式四位半自动量程万用表, 在Diyers中一直很受欢迎. sunzx送了我一台, 相当好用. 使用过程中发现它有一个很大的不足之处就是液晶屏没有背光, 光线较暗时读数不容易看清, 所以我决定给它加装背光. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_1.jpg"&gt;&lt;img src="/images/dmm2650_1.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DMM2650的液晶屏是双列针脚直插式的, 小心地把它从插座上取下来, 如图：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_2.jpg"&gt;&lt;img src="/images/dmm2650_2.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;背面贴了一层反光膜. 这层膜很致密, 用LED手电从背后照, 在前面基本看不到. 因此要加装背光, 必须把这层膜撕下来. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_3.jpg"&gt;&lt;img src="/images/dmm2650_3.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;撕的时候要很小心, 引脚碰弯了就不容易按回去了. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_4.jpg"&gt;&lt;img src="/images/dmm2650_4.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;接下来制作背光板. 这块2cm x 8cm的洞洞板长度长了点, 两端要锯掉一些. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_5.jpg"&gt;&lt;img src="/images/dmm2650_5.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;锯完之后, 尺寸正合适. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_6.jpg"&gt;&lt;img src="/images/dmm2650_6.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;在上面焊10个0805的白光LED, 以及相应的限流电阻. 背光不需要很亮, 大约0.5mA就足够, 这里限流电阻用了5.1K. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_7.jpg"&gt;&lt;img src="/images/dmm2650_7.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;点亮背光的效果. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_8.jpg"&gt;&lt;img src="/images/dmm2650_8.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;液晶屏插座正中是驱动芯片, 做好的背光板可以用双面胶贴在驱动芯片上. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_9.jpg"&gt;&lt;img src="/images/dmm2650_9.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;接下来要找到供电正负端, 很好找, 红色的电源开关最后面那两个引脚就是. 把背光板的引线缠在上面, 焊好. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_10.jpg"&gt;&lt;img src="/images/dmm2650_10.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;装回前面板, 开机! 怎么效果有点逗比……看来没有柔光片是不行的. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_11.jpg"&gt;&lt;img src="/images/dmm2650_11.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;柔光片这东西不好找, 试了不干胶贴纸的背纸、白色绝缘胶带、普通A4纸, 效果都不理想 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sansei DMM2650是80年代的小型台式四位半自动量程万用表, 在Diyers中一直很受欢迎. sunzx送了我一台, 相当好用. 使用过程中发现它有一个很大的不足之处就是液晶屏没有背光, 光线较暗时读数不容易看清, 所以我决定给它加装背光. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_1.jpg"&gt;&lt;img src="/images/dmm2650_1.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DMM2650的液晶屏是双列针脚直插式的, 小心地把它从插座上取下来, 如图：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_2.jpg"&gt;&lt;img src="/images/dmm2650_2.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;背面贴了一层反光膜. 这层膜很致密, 用LED手电从背后照, 在前面基本看不到. 因此要加装背光, 必须把这层膜撕下来. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_3.jpg"&gt;&lt;img src="/images/dmm2650_3.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;撕的时候要很小心, 引脚碰弯了就不容易按回去了. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_4.jpg"&gt;&lt;img src="/images/dmm2650_4.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;接下来制作背光板. 这块2cm x 8cm的洞洞板长度长了点, 两端要锯掉一些. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_5.jpg"&gt;&lt;img src="/images/dmm2650_5.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;锯完之后, 尺寸正合适. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_6.jpg"&gt;&lt;img src="/images/dmm2650_6.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;在上面焊10个0805的白光LED, 以及相应的限流电阻. 背光不需要很亮, 大约0.5mA就足够, 这里限流电阻用了5.1K. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_7.jpg"&gt;&lt;img src="/images/dmm2650_7.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;点亮背光的效果. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_8.jpg"&gt;&lt;img src="/images/dmm2650_8.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;液晶屏插座正中是驱动芯片, 做好的背光板可以用双面胶贴在驱动芯片上. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_9.jpg"&gt;&lt;img src="/images/dmm2650_9.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;接下来要找到供电正负端, 很好找, 红色的电源开关最后面那两个引脚就是. 把背光板的引线缠在上面, 焊好. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_10.jpg"&gt;&lt;img src="/images/dmm2650_10.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;装回前面板, 开机! 怎么效果有点逗比……看来没有柔光片是不行的. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_11.jpg"&gt;&lt;img src="/images/dmm2650_11.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;柔光片这东西不好找, 试了不干胶贴纸的背纸、白色绝缘胶带、普通A4纸, 效果都不理想. 最后用快递盒子里的泡沫棉, 垫了两层, 好象稍微好点了. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_12.jpg"&gt;&lt;img src="/images/dmm2650_12.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;装回外壳, 放在书架上, 先凑和着用吧, 等以后找到了合适的柔光片再给它换上. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/dmm2650_13.jpg"&gt;&lt;img src="/images/dmm2650_13.jpg" width="500" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;完~&lt;/p&gt;</content></entry><entry><title>南瓜灯</title><link href="http://st.avros.net/articles/pumpkin_light.html" rel="alternate"></link><published>2014-05-07T00:00:00+08:00</published><updated>2014-05-07T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2014-05-07:/articles/pumpkin_light.html</id><summary type="html">&lt;p&gt;某次在超市看到有这种球形蜡烛头卖，如图：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/pumpkin_1.jpg"&gt;&lt;img src="/images/pumpkin_1.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用记号笔把适当的地方涂黑，就成了这样：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/pumpkin_2.jpg"&gt;&lt;img src="/images/pumpkin_2.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后呢，在它下面熔个洞，放进一个橙色大功率LED，点亮以后的效果：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/pumpkin_3.jpg"&gt;&lt;img src="/images/pumpkin_3.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好象万圣节的时间搞错了……不过无所谓啦。&lt;/p&gt;
&lt;p&gt;最后，用AVR让它的亮度忽明忽暗，尽可能象真正的蜡烛一样——其实挺困难的。&lt;/p&gt;</summary><content type="html">&lt;p&gt;某次在超市看到有这种球形蜡烛头卖，如图：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/pumpkin_1.jpg"&gt;&lt;img src="/images/pumpkin_1.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用记号笔把适当的地方涂黑，就成了这样：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/pumpkin_2.jpg"&gt;&lt;img src="/images/pumpkin_2.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后呢，在它下面熔个洞，放进一个橙色大功率LED，点亮以后的效果：&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/pumpkin_3.jpg"&gt;&lt;img src="/images/pumpkin_3.jpg" width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好象万圣节的时间搞错了……不过无所谓啦。&lt;/p&gt;
&lt;p&gt;最后，用AVR让它的亮度忽明忽暗，尽可能象真正的蜡烛一样——其实挺困难的。&lt;/p&gt;</content></entry><entry><title>滑动触摸实验</title><link href="http://st.avros.net/articles/slide_sense.html" rel="alternate"></link><published>2013-07-14T00:00:00+08:00</published><updated>2013-07-14T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2013-07-14:/articles/slide_sense.html</id><summary type="html">&lt;p&gt;见ST的两个应用笔记, AN2927和AN2896. 基本原理就是把触摸区域当作一个电容, 用一个IO口通过大电阻对触摸区域充放电, 另一个IO口来读取状态, 记录充放电时间. 当手指摸上去时, 这个电容变大了, 因此充放电时间会变长. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://v.youku.com/v_show/id_XNTMzNTkxMDQ0.html" target="_blank"&gt;视频链接&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;见ST的两个应用笔记, AN2927和AN2896. 基本原理就是把触摸区域当作一个电容, 用一个IO口通过大电阻对触摸区域充放电, 另一个IO口来读取状态, 记录充放电时间. 当手指摸上去时, 这个电容变大了, 因此充放电时间会变长. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://v.youku.com/v_show/id_XNTMzNTkxMDQ0.html" target="_blank"&gt;视频链接&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>萤火虫瓶子&amp;LCD1602串口转换板</title><link href="http://st.avros.net/articles/firefly&amp;serlcd1602.html" rel="alternate"></link><published>2013-03-19T00:00:00+08:00</published><updated>2013-03-19T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2013-03-19:/articles/firefly&amp;serlcd1602.html</id><summary type="html">&lt;p&gt;前者是用AVR的io口模拟PWM, 驱动8个LED闪亮. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://v.youku.com/v_show/id_XNTI4Nzc4MDYw.html" target="_blank"&gt;视频链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;装到大玻璃瓶里, 关了灯看, 效果不错.&lt;/p&gt;
&lt;p&gt;分别试验了用PCF8574, 74HC164和用一片ATmega48实现用串口驱动1602液晶屏. &lt;/p&gt;
&lt;p&gt;PCF8574的方案很简单, 4个IO按4线法连接LCD高4位, 2个IO连接EN端和RS端. LCD RW直接接地, 用一只7660产生负压. 需要占用i2c口, 显示速度慢、性价比也低, 总之不推荐. &lt;/p&gt;
&lt;p&gt;用ATmega48扩展的话, 可以8线连接, 接口用i2c、spi、uart都可以, 用一个PWM口产生负压可以节省一只7660, 是最灵活的方式, 不过用uart时需要双方都有晶振. &lt;/p&gt;
&lt;p&gt;用74HC164要多占用两个IO, 不过用一些小技巧可以实现只占用两个GPIO：如图, 用电阻和二极管形成一个与门, 在串行写入数据时将最高位置1, 写完8bit后再拉高DATA端, 此时与门输出高电平, EN动作. 之后要拉低DATA, 连续八个CLK以清空164输出端, 避免影响下一轮. 实测写LCD快速、稳定, 成本也是三种方式里最低的. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/lcd_2wire.png" title="电路图"&gt;&lt;img src="/images/lcd_2wire.png" width="500px" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后记: 后来还是觉得4线接法驱动LCD1602不太稳定. 继续改进, 改为用HC164的八个输出驱动LCD1602的全部8位数据接口, 输入端同时驱动RS脚, 同时再用一个IO来驱动EN脚. 总共用了三个IO, 不过稳定性好多了.&lt;/p&gt;</summary><content type="html">&lt;p&gt;前者是用AVR的io口模拟PWM, 驱动8个LED闪亮. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://v.youku.com/v_show/id_XNTI4Nzc4MDYw.html" target="_blank"&gt;视频链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;装到大玻璃瓶里, 关了灯看, 效果不错.&lt;/p&gt;
&lt;p&gt;分别试验了用PCF8574, 74HC164和用一片ATmega48实现用串口驱动1602液晶屏. &lt;/p&gt;
&lt;p&gt;PCF8574的方案很简单, 4个IO按4线法连接LCD高4位, 2个IO连接EN端和RS端. LCD RW直接接地, 用一只7660产生负压. 需要占用i2c口, 显示速度慢、性价比也低, 总之不推荐. &lt;/p&gt;
&lt;p&gt;用ATmega48扩展的话, 可以8线连接, 接口用i2c、spi、uart都可以, 用一个PWM口产生负压可以节省一只7660, 是最灵活的方式, 不过用uart时需要双方都有晶振. &lt;/p&gt;
&lt;p&gt;用74HC164要多占用两个IO, 不过用一些小技巧可以实现只占用两个GPIO：如图, 用电阻和二极管形成一个与门, 在串行写入数据时将最高位置1, 写完8bit后再拉高DATA端, 此时与门输出高电平, EN动作. 之后要拉低DATA, 连续八个CLK以清空164输出端, 避免影响下一轮. 实测写LCD快速、稳定, 成本也是三种方式里最低的. &lt;/p&gt;
&lt;p&gt;&lt;a href="/images/lcd_2wire.png" title="电路图"&gt;&lt;img src="/images/lcd_2wire.png" width="500px" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后记: 后来还是觉得4线接法驱动LCD1602不太稳定. 继续改进, 改为用HC164的八个输出驱动LCD1602的全部8位数据接口, 输入端同时驱动RS脚, 同时再用一个IO来驱动EN脚. 总共用了三个IO, 不过稳定性好多了.&lt;/p&gt;</content></entry><entry><title>USB温度计</title><link href="http://st.avros.net/articles/usb18b20.html" rel="alternate"></link><published>2010-04-07T00:00:00+08:00</published><updated>2010-04-07T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2010-04-07:/articles/usb18b20.html</id><summary type="html">&lt;p&gt;用ATMEGA8+DS18B20做了个USB接口的温度计, 插上电脑就能显示室内温度, 体积和一般的U盘差不多大.&lt;/p&gt;</summary><content type="html">&lt;p&gt;用ATMEGA8+DS18B20做了个USB接口的温度计, 插上电脑就能显示室内温度, 体积和一般的U盘差不多大.&lt;/p&gt;</content></entry><entry><title>验钞笔</title><link href="http://st.avros.net/articles/cash_detector.html" rel="alternate"></link><published>2010-03-27T00:00:00+08:00</published><updated>2010-03-27T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2010-03-27:/articles/cash_detector.html</id><summary type="html">&lt;p&gt;拆了一支圆珠笔，粗细正好能装下一节7号锂电，利用原来的弹簧当触点。&lt;/p&gt;
&lt;p&gt;笔尖的位置装了一个5mm紫外LED，串27欧电阻限流。&lt;/p&gt;
&lt;p&gt;就这么简单！&lt;/p&gt;</summary><content type="html">&lt;p&gt;拆了一支圆珠笔，粗细正好能装下一节7号锂电，利用原来的弹簧当触点。&lt;/p&gt;
&lt;p&gt;笔尖的位置装了一个5mm紫外LED，串27欧电阻限流。&lt;/p&gt;
&lt;p&gt;就这么简单！&lt;/p&gt;</content></entry><entry><title>频率计</title><link href="http://st.avros.net/articles/freqmeter.html" rel="alternate"></link><published>2009-10-15T00:00:00+08:00</published><updated>2009-10-15T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2009-10-15:/articles/freqmeter.html</id><summary type="html">&lt;p&gt;输入信号经 K246 共源缓冲, 直耦到 C1959 放大,  74HC04 整形后通过另一只作为闸门的 C1959, 由 74HC393 和 Mega8 的 T1 计数器一起计数. 理论能测到 224=16.777216MHz.&lt;/p&gt;
&lt;p&gt;电路如图:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/freqmeter.png" title="电路图"&gt;&lt;img src="/images/freqmeter.png" width="500px" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;输入信号经 K246 共源缓冲, 直耦到 C1959 放大,  74HC04 整形后通过另一只作为闸门的 C1959, 由 74HC393 和 Mega8 的 T1 计数器一起计数. 理论能测到 224=16.777216MHz.&lt;/p&gt;
&lt;p&gt;电路如图:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/freqmeter.png" title="电路图"&gt;&lt;img src="/images/freqmeter.png" width="500px" /&gt;&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>分压电阻计算器</title><link href="http://st.avros.net/articles/res_divider.html" rel="alternate"></link><published>2009-02-08T00:00:00+08:00</published><updated>2009-02-08T00:00:00+08:00</updated><author><name>Stavros</name></author><id>tag:st.avros.net,2009-02-08:/articles/res_divider.html</id><summary type="html">&lt;p&gt;写了个计算DC-DC电路输出分压电阻的小工具, 如图.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/res_divider.png" title="截图"&gt;&lt;img src="/images/res_divider.png" height="300px" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;输入所需要的电压和FB端参考电压, 它就自动计算出所需要的电阻值和误差, 电阻全部用5%精度的E24序列.&lt;/p&gt;
&lt;p&gt;下载链接:&lt;/p&gt;
&lt;p&gt;&lt;a href="/files/calc.zip"&gt;calc.zip&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;写了个计算DC-DC电路输出分压电阻的小工具, 如图.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/res_divider.png" title="截图"&gt;&lt;img src="/images/res_divider.png" height="300px" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;输入所需要的电压和FB端参考电压, 它就自动计算出所需要的电阻值和误差, 电阻全部用5%精度的E24序列.&lt;/p&gt;
&lt;p&gt;下载链接:&lt;/p&gt;
&lt;p&gt;&lt;a href="/files/calc.zip"&gt;calc.zip&lt;/a&gt;&lt;/p&gt;</content></entry></feed>